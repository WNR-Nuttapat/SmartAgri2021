from math import pi
import serial
import time

n=0

ser = serial.Serial('COM7', baudrate = 115200, timeout = 1)
time.sleep(1)

wheelradius=0.035   #(meter)
wheelspan=0.295     #(meter)
R_TPR=970           #Right wheel Tick/Rev
L_TPR=970           #Left wheel Tick/Rev
pR_tick=0
pL_tick=0
curr_time=time.time()
prev_time=0

#PID

error = 0
pre_error = 0
sum_error = 0


## DataSending ##
## Motor Commanding -> index0=RM , index1=LM
MOTOR_ADR=[31,32]           ##Fix address 31->RM , 32->LM
MOTOR_DIR=[0,0]             ##Motor Direction 0->Foward , 1->Backward
MOTOR_PWM=[0,0]         ##Motor PWM (0-255)

def getValues():
    
    arduinoData = ser.readline()[:-2]#.decode('ascii')
    return arduinoData

def MotorR_Drive(value):
    dir=0
    if value>0:
        dir=0
    elif value<0:
        dir=1

    if abs(value)>255:
        value=255

    MOTOR_DIR[0]=dir
    MOTOR_PWM[0]=abs(value)

def MotorL_Drive(value):
    dir=0
    if value>0:
        dir=0
    elif value<0:
        dir=1

    if abs(value)>255:
        value=255
    elif abs(value)<50:
        value=50

    MOTOR_DIR[1]=dir
    MOTOR_PWM[1]=abs(value)


while(1):

    DATA="O"  ##First Bit of DATA
    for i in range(0,2):
                
        ADD=str(MOTOR_ADR[i])
        DIR=str(MOTOR_DIR[i])
        DATA=DATA+ADD+DIR
        PWM=[int(MOTOR_PWM[i]/100)%10,int(MOTOR_PWM[i]/10)%10,int(MOTOR_PWM[i]/1)%10]
        for j in range(0,3):
            DATA=DATA+str(PWM[j])
    DATA=DATA+"C"   ##Last Bit of DATA

    # print(DATA)
    # MotorR_Drive(100)
    # MotorL_Drive(-100)
    ser.write(bytes(DATA,'utf-8')) #Sent DATA to Arduino

    ## DataRecieving ##    
    Response=getValues()        ##Get DATA from Arduino
    stringData=Response.decode('ascii')
    stringData=stringData.split(',')    ##Split into 2 string
    # print(stringData)

    if len(stringData)==2 and stringData[0][0]=='A' and stringData[1][0]=='B':
        
        curr_time=time.time()
        if prev_time==0:
            prev_time=curr_time

        delta_time=(curr_time-prev_time)
        
        if delta_time !=0:
                
            R_tick=int(stringData[0][1:])
            L_tick=int(stringData[1][1:])
            
            deltaR_tick=R_tick-pR_tick
            deltaL_tick=L_tick-pL_tick


            dr=2*pi*wheelradius*(deltaR_tick/R_TPR)
            dl=2*pi*wheelradius*(deltaL_tick/L_TPR)

            vr=dr/delta_time
            vl=dl/delta_time

            # #Vmax = 0.5
            # #print(vr)
            print(vl)

            # PID Controlling
            
            Kp = 500
            Kd = 0
            Ki = 0

            error=0.45-vl

            sum_error = (sum_error*delta_time) + error
            motorspeed = (Kp*error) + (Ki*(sum_error)) + (Kd*(error - pre_error)/delta_time)
            print(motorspeed)
            MotorL_Drive(int(motorspeed))

            pre_error = error

            print("-----------------")









                    
            pR_tick=R_tick
            pL_tick=L_tick
            prev_time=curr_time    
            prev_time=curr_time
    
    time.sleep(0.00001)

