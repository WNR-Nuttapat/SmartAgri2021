from math import pi
import serial
import time

n=0

ser = serial.Serial('COM7', baudrate = 115200, timeout = 1)
time.sleep(1)

wheelradius=0.035   #(meter)
wheelspan=0.295     #(meter)
R_TPR=970           #Right wheel Tick/Rev
L_TPR=970           #Left wheel Tick/Rev
pR_tick=0
pL_tick=0
curr_time=time.time()
prev_time=0

def getValues():
    
    arduinoData = ser.readline()[:-2]#.decode('ascii')
    return arduinoData

while(1):

    ## DataSending ##
    ## Motor Commanding -> index0=RM , index1=LM
    MOTOR_ADR=[31,32]           ##Fix address 31->RM , 32->LM
    MOTOR_DIR=[0,0]             ##Motor Direction 0->Foward , 1->Backward
    MOTOR_PWM=[255,255]         ##Motor PWM (0-255)

    DATA="O"  ##First Bit of DATA
    for i in range(0,2):
                
        ADD=str(MOTOR_ADR[i])
        DIR=str(MOTOR_DIR[i])
        DATA=DATA+ADD+DIR
        PWM=[int(MOTOR_PWM[i]/100)%10,int(MOTOR_PWM[i]/10)%10,int(MOTOR_PWM[i]/1)%10]
        for j in range(0,3):
            DATA=DATA+str(PWM[j])
    DATA=DATA+"C"   ##Last Bit of DATA

    # print(DATA)
    ser.write(bytes(DATA,'utf-8')) #Sent DATA to Arduino

    ## DataRecieving ##    
    Response=getValues()        ##Get DATA from Arduino
    stringData=Response.decode('ascii')
    stringData=stringData.split(',')    ##Split into 2 string
    # print(stringData)

    if len(stringData)==2 and stringData[0][0]=='A' and stringData[1][0]=='B':
        
        curr_time=time.time()
        if prev_time==0:
            prev_time=curr_time

        delta_time=(curr_time-prev_time)
        
        if delta_time !=0:
                
            R_tick=int(stringData[0][1:])
            L_tick=int(stringData[1][1:])
            
            deltaR_tick=R_tick-pR_tick
            deltaL_tick=L_tick-pL_tick

            dr=2*pi*wheelradius*(deltaR_tick/R_TPR)
            dl=2*pi*wheelradius*(deltaL_tick/L_TPR)

            vr=dr/delta_time
            vl=dl/delta_time
            print(vr)
            print(vl)
                    
            pR_tick=R_tick
            pL_tick=L_tick
            prev_time=curr_time    
            prev_time=curr_time
    
    time.sleep(0.00001)
